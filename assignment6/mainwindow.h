/**
 * The entry point of the cat application.
 *
 * LAN QUANG HUYNH and Cheuk Yin Lau
 * 2025-2-27
 *
 * mainwindow.h
 *
 * This file declares the MainWindow class for the Simon game.
 * MainWindow handles the user interface (UI) components such as buttons,
 * progress bar, and status label. It responds to signals from the game model
 * (Model) to update the UI and animate UI elements.
 *
 * Features:
 *  - Displays the current round and player's progress.
 *  - Flashes the Simon game buttons based on the game sequence.
 *  - Animates the red and blue buttons to random positions.
 *  - Shows a prominent "You Lose!" message when the player makes a mistake.
 *
 * Usage:
 *  - The MainWindow is constructed using dependency injection; a pointer to
 *    a Model object is passed into the constructor.
 *  - The UI elements are manually positioned (not managed by layouts) to
 *    allow for dynamic repositioning and animation.
 */

#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include "model.h"

QT_BEGIN_NAMESPACE
namespace Ui { class MainWindow; }
QT_END_NAMESPACE

class MainWindow : public QMainWindow {
    Q_OBJECT

public:
    /**
     * @brief Constructs the MainWindow.
     * @param model Pointer to the game Model; used for connecting signals and slots.
     * @param parent Optional parent widget.
     */
    explicit MainWindow(Model* model, QWidget *parent = nullptr);

    /**
     * @brief Destructor for MainWindow.
     */
    ~MainWindow();

public slots:
    /**
     * @brief Updates the status label with the total round count.
     * @param totalRound The total round number.
     */
    void totalRound(int totalRound);

    /**
     * @brief Updates the progress bar based on the player's progress.
     * @param current The current move index the player has completed.
     * @param total The total number of moves in the sequence.
     */
    void updateProgressBar(int current, int total);

    /**
     * @brief Displays a prominent "You Lose!" message.
     */
    void onLose();

    /**
     * @brief Flashes a button given its identifier, sequence index, and total moves.
     * @param button Identifier of the button (0 for red, 1 for blue).
     * @param current The index of the current flash in the sequence.
     * @param total The total number of moves in the sequence.
     */
    void flashButton(int button, int current, int total);

    /**
     * @brief Animates the red and blue buttons to random positions.
     *
     * This function moves the red and blue buttons to new random positions
     * within the central widget while ensuring they do not overlap with the
     * Start button, status label, or progress bar.
     */
    void animateButtonMovement();

protected:
    /**
     * @brief Overrides the resizeEvent to reposition widgets when the main window is resized.
     * @param event Pointer to the QResizeEvent.
     */
    void resizeEvent(QResizeEvent *event) override;

private:
    /**
     * @brief Helper function to position the Start button, Status Label, and Progress Bar.
     *
     * Positions the Start button in the center of the central widget,
     * the status label slightly above it, and the progress bar slightly below.
     */
    void positionWidgets();

    Ui::MainWindow *ui;  ///< Pointer to the UI form generated by Qt Designer.
    Model *m_model;      ///< Pointer to the game model.
    int m_currentRound;  ///< Stores the current round (used for delay calculations and animations).
};

#endif // MAINWINDOW_H
